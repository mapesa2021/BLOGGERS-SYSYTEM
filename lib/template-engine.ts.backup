/**
 * Template Engine for Landing Page Generation
 */

export interface TemplateData {
  creatorId: string;
  authorId?: string;
  creatorName: string;
  creatorBio?: string;
  creatorImage?: string;
  creatorPrice?: number;
  creatorCurrency?: string;
}

export interface Template {
  id: string;
  name: string;
  description: string;
  html: string;
  css: string;
}

export class TemplateEngine {
  private templates: Map<string, Template> = new Map();

  constructor() {
    this.initializeTemplates();
  }

  private initializeTemplates() {
    // Minimal Creator Template
    this.addTemplate({
      id: 'minimal',
      name: 'Minimal Creator',
      description: 'Clean, simple design focused on content',
      html: this.getMinimalHTML(),
      css: this.getMinimalCSS(),
    });

    // Modern Business Template
    this.addTemplate({
      id: 'modern',
      name: 'Modern Business',
      description: 'Professional business-focused design',
      html: this.getModernHTML(),
      css: this.getModernCSS(),
    });
  }

  addTemplate(template: Template): void {
    this.templates.set(template.id, template);
  }

  getTemplates(): Template[] {
    return Array.from(this.templates.values());
  }

  getTemplate(templateId: string): Template | undefined {
    return this.templates.get(templateId);
  }

  generatePage(templateId: string, data: TemplateData): string {
    const template = this.getTemplate(templateId);
    if (!template) {
      throw new Error(`Template ${templateId} not found`);
    }

    let html = template.html;
    let css = template.css;

    // Replace variables with fallbacks
    html = html.replace(/\{\{creatorId\}\}/g, data.creatorId || 'Creator');
    // No longer need authorId replacement - using dynamic signup
    html = html.replace(/\{\{creatorName\}\}/g, data.creatorName || data.creatorId || 'Creator');
    html = html.replace(/\{\{creatorBio\}\}/g, data.creatorBio || 'Welcome to my creator page!');
    html = html.replace(/\{\{creatorImage\}\}/g, data.creatorImage || 'https://via.placeholder.com/150x150/667eea/ffffff?text=Creator');
    html = html.replace(/\{\{creatorPrice\}\}/g, (data.creatorPrice || 0).toString());
    html = html.replace(/\{\{creatorCurrency\}\}/g, data.creatorCurrency || 'TZS');

    return this.combineHTML(html, css, data);
  }

  private combineHTML(html: string, css: string, data: TemplateData): string {
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${data.creatorName} - Clubzila Creator</title>
    <style>${css}</style>
</head>
<body>
    ${html}
</body>
</html>`;
  }

  private getMinimalHTML(): string {
    return `<div class="container">
  <div class="hero-image">
    <img src="https://images.pexels.com/photos/40784/drops-of-water-water-nature-liquid-40784.jpeg?cs=srgb&dl=pexels-pixabay-40784.jpg&fm=jpg" alt="Water drops" class="hero-img">
  </div>

  <div class="profile">
    <img src="{{creatorImage}}" alt="{{creatorName}}" class="avatar">
    <h1>{{creatorName}}</h1>
    <p class="bio">{{creatorBio}}</p>
  </div>
  
  <div class="subscription">
    <h2>Subscribe to {{creatorName}}</h2>
    <div class="price">{{creatorPrice}} {{creatorCurrency}}/month</div>
    
    <div class="subscription-form">
      <div class="form-step" id="step1">
        <p class="form-description">Enter your mobile money phone number to subscribe</p>
        <input type="tel" id="phoneNumber" placeholder="Enter your mobile money phone number" class="form-input" required>
        <button onclick="subscribe()" class="subscribe-btn">Subscribe Now</button>
      </div>
      
      <div class="form-step" id="step2" style="display: none;">
        <div class="success-message">
          <h3>Subscription Initiated! üì±</h3>
          <p>Check your phone for a USSD prompt to complete the payment.</p>
          <p class="ussd-info">You'll receive a mobile money prompt on <strong id="userPhone"></strong></p>
          <div class="payment-steps">
            <p><strong>Next steps:</strong></p>
            <ol>
              <li>Check your phone for USSD prompt</li>
              <li>Enter your mobile money PIN</li>
              <li>Confirm the payment amount</li>
              <li>You'll get access to {{creatorName}}'s content!</li>
            </ol>
          </div>
        </div>
      </div>
      
      <div class="form-step" id="step3" style="display: none;">
        <div class="error-message">
          <h3>Something went wrong</h3>
          <p id="errorText">Please try again.</p>
          <button onclick="backToStep1()" class="subscribe-btn">Try Again</button>
        </div>
      </div>
    </div>
  </div>

  <footer>
    <p>&copy; 2024 {{creatorName}}. Powered by <a href="https://clubzila.com" target="_blank">Clubzila</a></p>
  </footer>
</div>

<script>
let currentCreatorId = '{{creatorId}}';

async function subscribe() {
  const phoneNumber = document.getElementById('phoneNumber').value.trim();
  
  if (!phoneNumber) {
    alert('Please enter your mobile money phone number');
    return;
  }
  
  // Show processing popup
  showProcessingState();
  
  try {
    const response = await fetch('/api/subscribe', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        pageId: window.location.pathname.split('/').pop(),
        phoneNumber: phoneNumber,
        templateType: 'modern'
      })
    });
    
    const result = await response.json();
    
    // Hide processing popup
    hideProcessingState();
    
    if (result.success) {
      // Show success step with USSD instructions
      document.getElementById('userPhone').textContent = phoneNumber;
      showStep(2);
    } else {
      showError(result.message || 'Subscription failed');
    }
  } catch (error) {
    // Hide processing popup
    hideProcessingState();
    showError('Network error. Please try again.');
  }
}

function showProcessingState() {
  const subscribeBtn = document.querySelector('.subscribe-btn, .cta-btn');
  
  if (subscribeBtn) {
    subscribeBtn.disabled = true;
    subscribeBtn.textContent = 'Processing...';
    subscribeBtn.style.opacity = '0.7';
  }
  
  // Create processing popup
  const processingPopup = document.createElement('div');
  processingPopup.id = 'processing-popup';
  processingPopup.className = 'processing-popup';
  processingPopup.innerHTML = 
    '<div class="processing-content">' +
      '<div class="processing-spinner"></div>' +
      '<h3>Processing Your Request</h3>' +
      '<p>Please wait while we set up your subscription...</p>' +
      '<div class="processing-steps">' +
        '<div class="step" id="step-signup">' +
          '<span class="step-icon">‚è≥</span>' +
          '<span>Checking user account...</span>' +
        '</div>' +
        '<div class="step" id="step-payment">' +
          '<span class="step-icon">‚è≥</span>' +
          '<span>Initiating payment...</span>' +
        '</div>' +
      '</div>' +
    '</div>';
  
  document.body.appendChild(processingPopup);
  
  // Simulate step progression
  setTimeout(() => {
    const signupStep = document.getElementById('step-signup');
    if (signupStep) {
      signupStep.classList.add('active');
      signupStep.querySelector('.step-icon').textContent = '‚úÖ';
    }
  }, 2000);
  
  setTimeout(() => {
    const paymentStep = document.getElementById('step-payment');
    if (paymentStep) {
      paymentStep.classList.add('active');
      paymentStep.querySelector('.step-icon').textContent = '‚úÖ';
    }
  }, 4000);
}

function hideProcessingState() {
  const subscribeBtn = document.querySelector('.subscribe-btn, .cta-btn');
  const processingPopup = document.getElementById('processing-popup');
  
  if (subscribeBtn) {
    subscribeBtn.disabled = false;
    subscribeBtn.textContent = 'Subscribe Now';
    subscribeBtn.style.opacity = '1';
  }
  
  if (processingPopup) {
    processingPopup.remove();
  }
}

function showStep(stepNumber) {
  // Hide all steps
  for (let i = 1; i <= 3; i++) {
    document.getElementById('step' + i).style.display = 'none';
  }
  
  // Show the specified step
  document.getElementById('step' + stepNumber).style.display = 'block';
}

function showError(message) {
  document.getElementById('errorText').textContent = message;
  showStep(3);
}

function backToStep1() {
  showStep(1);
  document.getElementById('phoneNumber').value = '';
}
</script>`;
  }

  private getMinimalCSS(): string {
    return `* { margin: 0; padding: 0; box-sizing: border-box; }
body { font-family: Arial, sans-serif; background: linear-gradient(135deg, #667eea, #764ba2); min-height: 100vh; }
.container { max-width: 600px; margin: 0 auto; padding: 0; text-align: center; }
.hero-image { width: 100%; height: 300px; overflow: hidden; border-radius: 0 0 20px 20px; }
.hero-img { width: 100%; height: 100%; object-fit: cover; }
.profile { background: white; padding: 2rem; margin: 2rem; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
.avatar { width: 100px; height: 100px; border-radius: 50%; margin-bottom: 1rem; }
.bio { color: #666; margin-bottom: 1rem; }
.subscription { background: white; padding: 2rem; margin: 0 2rem 2rem 2rem; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
.price { font-size: 2rem; font-weight: bold; color: #667eea; margin: 1rem 0; }
.subscription-form { margin-top: 2rem; }
.form-step { margin-bottom: 1rem; }
.form-description { color: #666; margin-bottom: 1rem; font-size: 0.9rem; }
.form-input { width: 100%; padding: 1rem; border: 2px solid #e1e5e9; border-radius: 8px; font-size: 1rem; margin-bottom: 1rem; }
.form-input:focus { outline: none; border-color: #667eea; }
.subscribe-btn { background: #667eea; color: white; border: none; padding: 1rem 2rem; border-radius: 25px; font-size: 1.1rem; cursor: pointer; margin: 0.5rem; }
.subscribe-btn:hover { background: #5a6fd8; }
.subscribe-btn:disabled { opacity: 0.7; cursor: not-allowed; }
.success-message { color: #28a745; }
.ussd-info { background: #f8f9fa; padding: 1rem; border-radius: 8px; margin: 1rem 0; }
.payment-steps { text-align: left; margin-top: 1rem; }
.payment-steps ol { margin-left: 1.5rem; }
.payment-steps li { margin: 0.5rem 0; color: #666; }
.error-message { color: #dc3545; }
footer { margin: 0 2rem 2rem 2rem; color: white; }
footer a { color: white; text-decoration: none; }`;
  }

  private getModernHTML(): string {
    return `<div class="app">
  <nav class="navbar">
    <div class="logo">Clubzila Creator</div>
  </nav>
  
  <header class="hero">
    <div class="hero-bg">
      <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQAVXizNz-j3efqxTqoFLMoIOsCZawMMMWYAw&s" alt="Business background" class="hero-bg-img">
    </div>
    <div class="hero-content">
      <img src="{{creatorImage}}" alt="{{creatorName}}" class="hero-image">
      <div class="hero-text">
        <h1>{{creatorName}}</h1>
        <p>{{creatorBio}}</p>
        <div class="subscription-form">
          <div class="form-step" id="step1">
            <p class="form-description">Enter your User ID, Creator ID, and phone number to subscribe</p>
            <input type="text" id="userId" placeholder="Enter your User ID" class="form-input" required>
            <input type="text" id="creatorId" placeholder="Enter Creator ID" class="form-input" required>
            <input type="tel" id="phoneNumber" placeholder="Enter your mobile money phone number" class="form-input" required>
            <button onclick="subscribe()" class="cta-btn">Subscribe Now</button>
          </div>
          
          <div class="form-step" id="step2" style="display: none;">
            <div class="success-message">
              <h3>Subscription Initiated! üì±</h3>
              <p>Check your phone for a USSD prompt to complete the payment.</p>
              <p class="ussd-info">You'll receive a mobile money prompt on <strong id="userPhone"></strong></p>
              <div class="payment-steps">
                <p><strong>Next steps:</strong></p>
                <ol>
                  <li>Check your phone for USSD prompt</li>
                  <li>Enter your mobile money PIN</li>
                  <li>Confirm the payment amount</li>
                  <li>You'll get access to {{creatorName}}'s content!</li>
                </ol>
              </div>
            </div>
          </div>
          
          <div class="form-step" id="step3" style="display: none;">
            <div class="error-message">
              <h3>Something went wrong</h3>
              <p id="errorText">Please try again.</p>
              <button onclick="backToStep1()" class="cta-btn">Try Again</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </header>
  
  <main class="main-content">
    <section class="features">
      <h2>What You'll Get</h2>
      <div class="feature-grid">
        <div class="feature">
          <h3>Exclusive Content</h3>
          <p>Access to premium content only available to subscribers</p>
        </div>
        <div class="feature">
          <h3>Direct Access</h3>
          <p>Connect directly with {{creatorName}} through Clubzila</p>
        </div>
        <div class="feature">
          <h3>Premium Support</h3>
          <p>Get priority support and faster response times</p>
        </div>
      </div>
    </section>
  </main>
  
  <footer class="footer">
    <p>&copy; 2024 {{creatorName}}. Powered by <a href="https://clubzila.com" target="_blank">Clubzila</a></p>
  </footer>
</div>

<script>
let currentCreatorId = '{{creatorId}}';

async function subscribe() {
  const phoneNumber = document.getElementById('phoneNumber').value.trim();
  
  if (!phoneNumber) {
    alert('Please enter your mobile money phone number');
    return;
  }
  
  // Show processing popup
  showProcessingState();
  
  try {
    const response = await fetch('/api/subscribe', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        pageId: window.location.pathname.split('/').pop(),
        phoneNumber: phoneNumber,
        templateType: 'modern'
      })
    });
    
    const result = await response.json();
    
    // Hide processing popup
    hideProcessingState();
    
    if (result.success) {
      // Show success step with USSD instructions
      document.getElementById('userPhone').textContent = phoneNumber;
      showStep(2);
    } else {
      showError(result.message || 'Subscription failed');
    }
  } catch (error) {
    // Hide processing popup
    hideProcessingState();
    showError('Network error. Please try again.');
  }
}

function showProcessingState() {
  const subscribeBtn = document.querySelector('.subscribe-btn, .cta-btn');
  
  if (subscribeBtn) {
    subscribeBtn.disabled = true;
    subscribeBtn.textContent = 'Processing...';
    subscribeBtn.style.opacity = '0.7';
  }
  
  // Create processing popup
  const processingPopup = document.createElement('div');
  processingPopup.id = 'processing-popup';
  processingPopup.className = 'processing-popup';
  processingPopup.innerHTML = 
    '<div class="processing-content">' +
      '<div class="processing-spinner"></div>' +
      '<h3>Processing Your Request</h3>' +
      '<p>Please wait while we set up your subscription...</p>' +
      '<div class="processing-steps">' +
        '<div class="step" id="step-signup">' +
          '<span class="step-icon">‚è≥</span>' +
          '<span>Checking user account...</span>' +
        '</div>' +
        '<div class="step" id="step-payment">' +
          '<span class="step-icon">‚è≥</span>' +
          '<span>Initiating payment...</span>' +
        '</div>' +
      '</div>' +
    '</div>';
  
  document.body.appendChild(processingPopup);
  
  // Simulate step progression
  setTimeout(() => {
    const signupStep = document.getElementById('step-signup');
    if (signupStep) {
      signupStep.classList.add('active');
      signupStep.querySelector('.step-icon').textContent = '‚úÖ';
    }
  }, 2000);
  
  setTimeout(() => {
    const paymentStep = document.getElementById('step-payment');
    if (paymentStep) {
      paymentStep.classList.add('active');
      paymentStep.querySelector('.step-icon').textContent = '‚úÖ';
    }
  }, 4000);
}

function hideProcessingState() {
  const subscribeBtn = document.querySelector('.subscribe-btn, .cta-btn');
  const processingPopup = document.getElementById('processing-popup');
  
  if (subscribeBtn) {
    subscribeBtn.disabled = false;
    subscribeBtn.textContent = 'Subscribe Now';
    subscribeBtn.style.opacity = '1';
  }
  
  if (processingPopup) {
    processingPopup.remove();
  }
}

function showStep(stepNumber) {
  // Hide all steps
  for (let i = 1; i <= 3; i++) {
    document.getElementById('step' + i).style.display = 'none';
  }
  
  // Show the specified step
  document.getElementById('step' + stepNumber).style.display = 'block';
}

function showError(message) {
  document.getElementById('errorText').textContent = message;
  showStep(3);
}

function backToStep1() {
  showStep(1);
  document.getElementById('phoneNumber').value = '';
}
</script>`;
  }

  private getModernCSS(): string {
    return `* { margin: 0; padding: 0; box-sizing: border-box; }
body { font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; }
.app { min-height: 100vh; display: flex; flex-direction: column; }
.navbar { background: white; padding: 1rem 2rem; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
.logo { font-size: 1.5rem; font-weight: bold; color: #3b82f6; }
.hero { position: relative; padding: 4rem 2rem; flex: 1; overflow: hidden; }
.hero-bg { position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: 1; }
.hero-bg-img { width: 100%; height: 100%; object-fit: cover; filter: brightness(0.7); }
.hero-content { position: relative; z-index: 2; max-width: 1000px; margin: 0 auto; display: grid; grid-template-columns: 1fr 1fr; gap: 3rem; align-items: center; }
.hero-image { width: 100%; max-width: 400px; border-radius: 15px; box-shadow: 0 20px 40px rgba(0,0,0,0.1); }
.hero-text h1 { font-size: 3rem; margin-bottom: 1rem; color: white; text-shadow: 2px 2px 4px rgba(0,0,0,0.7); }
.hero-text p { font-size: 1.2rem; color: white; margin-bottom: 2rem; text-shadow: 1px 1px 2px rgba(0,0,0,0.7); }
.subscription-form { margin-top: 2rem; }
.form-step { margin-bottom: 1rem; }
.form-description { color: rgba(255,255,255,0.9); margin-bottom: 1rem; font-size: 0.9rem; }
.form-input { width: 100%; padding: 1rem; border: 2px solid rgba(255,255,255,0.3); border-radius: 8px; font-size: 1rem; margin-bottom: 1rem; background: rgba(255,255,255,0.1); color: white; }
.form-input::placeholder { color: rgba(255,255,255,0.7); }
.form-input:focus { outline: none; border-color: white; background: rgba(255,255,255,0.2); }
.cta-btn { background: #3b82f6; color: white; border: none; padding: 1rem 2rem; border-radius: 8px; font-size: 1.1rem; cursor: pointer; margin: 0.5rem; }
.cta-btn:hover { background: #2563eb; }
.success-message { color: #28a745; text-align: center; }
.ussd-info { background: rgba(255,255,255,0.1); padding: 1rem; border-radius: 8px; margin: 1rem 0; color: white; }
.payment-steps { text-align: left; margin-top: 1rem; }
.payment-steps ol { margin-left: 1.5rem; }
.payment-steps li { margin: 0.5rem 0; color: rgba(255,255,255,0.9); }
.error-message { color: #dc3545; text-align: center; }
.main-content { flex: 1; padding: 4rem 2rem; background: white; }
.features h2 { text-align: center; font-size: 2.5rem; margin-bottom: 3rem; color: #1f2937; }
.feature-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 2rem; max-width: 1200px; margin: 0 auto; }
.feature { text-align: center; padding: 2rem; }
.feature h3 { font-size: 1.5rem; margin-bottom: 1rem; color: #3b82f6; }
.feature p { color: #6b7280; line-height: 1.6; }
.footer { background: #1f2937; color: white; text-align: center; padding: 2rem; }
.footer a { color: #3b82f6; text-decoration: none; }
.processing-popup { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); display: flex; align-items: center; justify-content: center; z-index: 1000; }
.processing-content { background: white; padding: 2rem; border-radius: 15px; text-align: center; max-width: 400px; box-shadow: 0 20px 40px rgba(0,0,0,0.3); }
.processing-spinner { width: 50px; height: 50px; border: 4px solid #f3f3f3; border-top: 4px solid #3b82f6; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 1rem; }
.processing-content h3 { color: #1f2937; margin-bottom: 0.5rem; }
.processing-content p { color: #6b7280; margin-bottom: 1.5rem; }
.processing-steps { text-align: left; }
.processing-steps .step { display: flex; align-items: center; margin: 0.5rem 0; padding: 0.5rem; border-radius: 8px; transition: all 0.3s ease; }
.processing-steps .step.active { background: #f0f9ff; color: #3b82f6; }
.processing-steps .step-icon { font-size: 1.2rem; margin-right: 0.5rem; }
@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }

@media (max-width: 768px) {
  .hero-content { grid-template-columns: 1fr; text-align: center; }
  .hero-text h1 { font-size: 2rem; }
  .hero-text p { font-size: 1rem; }
  .features h2 { font-size: 2rem; }
  .feature-grid { grid-template-columns: 1fr; }
}`;
  }
}

export const templateEngine = new TemplateEngine();
